use std::fs;
use std::io::{BufRead, BufReader, Write};

use anyhow::{Context, Result};
use regex::Regex;

// We need to patch the schema generated by diesel for sqlite.
//
// Sqlite has as default primary key type 'PRIMARY KEY INTEGER'.
// Diesel interprets that as 'i32' and it also thinks it's nullable.
//
// If we just replace `id -> Nullable<Integer>` with `id -> BigInt`
// everything simply works as it is supposed to.
fn patch_schema_rs() -> Result<()> {

    let src_path = "src/db/schema.diesel.rs";
    let dst_path = "src/db/schema.rs";

    let mut reader = BufReader::new(fs::File::open(&src_path).with_context(|| format!("src_path: {:?}", src_path))?);
    let mut writer = fs::File::create(&dst_path).with_context(|| format!("dst_path: {:?}", dst_path))?;

    let mut buf = String::new();
    let re = Regex::new(r"^(\s+id -> )Nullable<Integer>(.*)").unwrap();

    writeln!(writer, "// Generated by build.rs from {}", src_path)?;
    writeln!(writer, "")?;

    loop {
        buf.clear();
        if reader.read_line(&mut buf)? == 0 {
            break;
        }
        write!(writer, "{}", re.replace(&buf, "${1}BigInt${2}"))?;
    }
    writer.flush()?;

    println!("cargo:rerun-if-changed={}", src_path);

    Ok(())
}

fn main() -> Result<()> {
    patch_schema_rs()?;

    Ok(())
}

